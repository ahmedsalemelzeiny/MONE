// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.6 (swiftlang-5.6.0.323.62 clang-1316.0.20.8)
// swift-module-flags: -target arm64-apple-ios11.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MoneyHash
import Foundation
@_exported import MoneyHash
import MoneyHashShared
import Swift
import UIKit
import WebKit
import _Concurrency
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MHCardViewController : MoneyHash.MHViewController<MoneyHash.MHCardStatus> {
  @objc deinit
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MHPayoutViewController : MoneyHash.MHViewController<MoneyHash.MHPayoutStatus> {
  @objc deinit
}
public enum MHPaymentStatus : MoneyHash.MHStatus {
  case error(errors: [Swift.String])
  case failed(result: MoneyHash.PaymentResult)
  case requireExtraAction(actions: [Swift.String], result: MoneyHash.PaymentResult)
  case success(result: MoneyHash.PaymentResult)
  case unknown
  case cancelled
}
public struct PaymentIntent : Swift.Encodable {
  public let id: Swift.String?
  public let amount: Swift.Double?
  public let amountValue: Swift.String?
  public let currency: Swift.String?
  public let isLive: Swift.Bool?
  public let selectedMethod: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PaymentTransaction : Swift.Encodable {
  public let id: Swift.String?
  public let date: Swift.String?
  public let status: Swift.String?
  public let paymentMethod: MoneyHash.PaymentMethod?
  public let billingData: Swift.String?
  public let customFields: Swift.String?
  public let customFormAnswers: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PaymentMethod : Swift.Encodable {
  public let checkoutIcons: [Swift.String]?
  public let paymentMethodName: Swift.String?
  public let paymentMethod: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PaymentResult : Swift.Encodable {
  public let intent: MoneyHash.PaymentIntent?
  public let transaction: MoneyHash.PaymentTransaction?
  public func encode(to encoder: Swift.Encoder) throws
}
extension Swift.Encodable {
  public func convertToJSONString() throws -> Swift.String
  public func convertToDictionary() throws -> [Swift.String : Any]
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MHPaymentViewController : MoneyHash.MHViewController<MoneyHash.MHPaymentStatus> {
  @objc deinit
}
public enum MHPayoutStatus : MoneyHash.MHStatus {
  case error(errors: [Swift.String])
  case failed(result: MoneyHash.PayoutResult)
  case requireExtraAction(actions: [Swift.String], result: MoneyHash.PayoutResult)
  case success(result: MoneyHash.PayoutResult)
  case unknown
  case cancelled
}
public struct PayoutIntent : Swift.Encodable {
  public let id: Swift.String?
  public let amount: Swift.Double?
  public let maxPayoutAmount: Swift.Double?
  public let amountCurrency: Swift.String?
  public let isLive: Swift.Bool?
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PayoutTransaction : Swift.Encodable {
  public let id: Swift.String?
  public let date: Swift.String?
  public let status: Swift.String?
  public let amountCurrency: Swift.String?
  public let maxPayoutAmount: Swift.Double?
  public let amount: Swift.Double?
  public let payoutMethod: MoneyHash.PayoutMethod?
  public let billingData: Swift.String?
  public let customFields: Swift.String?
  public let customMessage: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PayoutMethod : Swift.Encodable {
  public let checkoutIcons: [Swift.String]?
  public let payoutMethodName: Swift.String?
  public let payoutMethod: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
}
public struct PayoutResult : Swift.Encodable {
  public let intent: MoneyHash.PayoutIntent?
  public let transaction: MoneyHash.PayoutTransaction?
  public func encode(to encoder: Swift.Encoder) throws
}
public protocol MHStatus {
  static var cancelled: Self { get }
}
@_hasMissingDesignatedInitializers @_Concurrency.MainActor(unsafe) public class MHViewController<T> : UIKit.UIViewController, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate where T : MoneyHash.MHStatus {
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func loadView()
  @_Concurrency.MainActor(unsafe) @objc override dynamic public func viewDidLoad()
  @objc deinit
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFinish navigation: WebKit.WKNavigation!)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFail navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: Swift.Error)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor(unsafe) @objc public func webView(_ webView: WebKit.WKWebView, createWebViewWith configuration: WebKit.WKWebViewConfiguration, for navigationAction: WebKit.WKNavigationAction, windowFeatures: WebKit.WKWindowFeatures) -> WebKit.WKWebView?
}
public enum MHCardStatus : MoneyHash.MHStatus {
  case error(errors: [Swift.String])
  case failed(result: MoneyHash.CardResult)
  case success(result: MoneyHash.CardResult)
  case unknown
  case cancelled
}
public struct CardResult : Swift.Encodable {
  public let id: Swift.String?
  public let status: Swift.String?
  public func encode(to encoder: Swift.Encoder) throws
}
public enum MHPaymentHandler {
  public static func startPaymentFlow(on viewController: UIKit.UIViewController, withPaymentId paymentId: Swift.String, completionHandler: @escaping (MoneyHash.MHPaymentStatus) -> Swift.Void)
  public static func startPayoutFlow(on viewController: UIKit.UIViewController, withPayoutId payoutId: Swift.String, completionHandler: @escaping (MoneyHash.MHPayoutStatus) -> Swift.Void)
  public static func startCardFlow(on viewController: UIKit.UIViewController, withCardId cardId: Swift.String, completionHandler: @escaping (MoneyHash.MHCardStatus) -> Swift.Void)
}
